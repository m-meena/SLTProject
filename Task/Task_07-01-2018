1.Write 3 different java programs to print the following patterns
a) 1
   12
   123
   12345
   
public class Program1A {
    public static void main(String[] args) {
        int num=5;
        for(int i=1;i<=num;i++) {
            if(i==4) {
                continue;
            } 
            for(int j=1;j<=i;j++) {
                System.out.print(j);
            }
            System.out.println();
}}}

b) 54321
   5432
   543
   54
   5
   
public class Program1B {
    public static void main(String args[]) {
        int num=5;
        for(int i=1;i<=num;i++) {            
            for(int j=num;j>=i;j--) {
                System.out.print(j);
            }
            System.out.println();
}}}

 c)     x
       xxx
      xxxxx
     xxxxxxx
      xxxxx
       xxx
        x
    Note: Shape will be Rhombus.

public class Program1C {
    public static void main(String args[]) {
        int num=4, i, j, k;
        for (i = 1; i <= num; i++) {
            for (j = i; j < num; j++) {
                System.out.print(" ");
            }
            for (k = 1; k < (i * 2); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (i = num-1; i >= 1; i--) {
            for (j = num; j > i; j--) {
                System.out.print(" ");
            }
            for (k = 1; k < (i * 2); k++) {
                System.out.print("*");
            }
            System.out.println();
}}}

2. Write a java program to take the input from user and determine if it is a prime number or not.

import java.util.Scanner;
public class Program2 {
    public static void main(String args[]) {
        int i = 0, input, flag=0;
        System.out.println("Enter a number:");
        Scanner sc = new Scanner(System.in);
        input = sc.nextInt();
        for (i = 2; i < input / 2; i++) {
            if (input % i == 0) {
                flag = 1;
            }
        }
        if(flag == 1) {
            System.out.println("Given number is not a prime");
        }
        else {
            System.out.println("Given number is a prime");
}}}

3. Write a java program to display the fibonacci series till less than 200 using only 2 variables.

public class Program3 {
    public static void main(String ar[]) {
        int var1 = 0, var2 = 1, sum =0;        
        System.out.println("Fibonacci series:\n");
        System.out.println(var1+"\n"+var2);        
        while(sum<200) {
            sum = var1 + var2;
            System.out.println(sum);   
            var1 = var2;
            var2 = sum;
}}}

5.Write Java program to check if a name is palindrome.

import java.util.Scanner;
public class Program5 {
    public static void main(String ar[]) {
        String str, reverse = "";
        System.out.println("Enter a string:");
        Scanner sc = new Scanner(System.in);
        str = sc.next();
        for (int i = str.length() - 1; i >= 0; i--) {
            reverse = reverse + str.charAt(i);
        }
        if (str.equals(reverse)) {
            System.out.println("Given string is a palindrome");
        } else {
            System.out.println("Given string is not a palindrome");
}}}

6.Write Java program to check if a number is Armstrong number or not? (input 153 output true,  123 output false)

import java.util.Scanner;
public class Program6 {
    public static void main(String ar[]) {
        int value;
        int temp = 0, sum = 0, rev = 0;        
        System.out.println("Enter a number");
        Scanner sc = new Scanner(System.in);
        value = sc.nextInt();
        temp = value;
        while (value != 0) {
            rev = value % 10;
            sum = sum + (rev * rev * rev);
            value = value / 10;
        }
        if (sum == temp) {
            System.out.println("True");
        } else {
            System.out.println("False");
        }
    }
}

7.How to find factorial of number in Java using iteration?

import java.util.Scanner;
public class Program7 {
    public static void main(String ar[]) {
        System.out.println("Enter a number ");
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int result = fact(num);
        System.out.println("Factorial is "+result);
    }
    static int fact(int n) {
        if (n == 0) {
            return 1;
        } else {
            return (n * fact(n - 1));
        }
    }
}

8.Write a Java code to take a character as a input from user and determine if it is a vowel or a consonant using conditional construct.

import java.util.Scanner;
public class Program8 {
    public static void main(String ar[]) {
        System.out.println("Enter a character:");
        Scanner sc = new Scanner(System.in);
        char c = sc.next().charAt(0);
        switch(c){
            case 'a':
            case 'A':
            case 'e':
            case 'E':
            case 'i':
            case 'I':
            case 'o':
            case 'O':
            case 'u':
            case 'U':
                System.out.println("Given character is vowel"); break;
            default:
                System.out.println("Given character is not a vowel");               
        }        
    }
}

9. Write a switch case java code to create calculator with + - / * functionalities only.

import java.util.Scanner;
public class Program9 {
    public static void main(String ar[]) {
        float n1, n2, result;
        int ch;
        n1=n2=result=0;
        System.out.println("Enter two numbers");
        Scanner sc = new Scanner(System.in);
        n1=sc.nextFloat();
        n2=sc.nextFloat();
        System.out.println("1.Addtion \n2.Substraction \n3.Multiplication \n4.Division\nEnter your choice:");
        ch = sc.nextInt();        
        switch (ch) {
            case 1:
                result = n1 + n2;
                break;
            case 2:
                result = n1 - n2;
                break;
            case 3:
                result = n1 * n2;
                break;
            case 4:
                result = n1 / n2;
                break;
            default:
                System.out.println("Invalid choice");
        }
        System.out.println("Result = " + result);
    }
}

10. Write a java code to copy one array into another.

public class Program10 {
    public static void main(String arg[]) {
        int arr1[] = {1, 2, 3, 4, 5};
        int arr2[] = {};
        System.out.println("First array arr1[]:");
        for (int i = 0; i < arr1.length; i++) {
            System.out.println(arr1[i]);
            arr2 = arr1;
        }
        System.out.println("Copied array arr2[]:");
        for (int i = 0; i < arr2.length; i++) {
            System.out.println(arr2[i]);
        }
    }
}

11. Write a java code to compare the length of two arrays and display the longer array.

public class Program11 {
    public static void main(String arg[])
    {
        int a1[]={1,2,3,4,5,6};
        int a2[]={3,5,8};
        System.out.println("Array1");
        for(int i=0;i<a1.length;i++)
        {
            System.out.print(a1[i]+" ");
        }
        System.out.println("\nArray2");
        for(int i=0;i<a2.length;i++)
        {
            System.out.print(a2[i]+" ");
        }
        if(a1.length > a2.length) {
            System.out.println("\nArray1 is greater");
        }
        else {
            System.out.println("\nArray2 is greater");
        }
    }
}

12. Write a java code to display a reverse String array.

import java.util.Scanner;
public class Program12 {
    public static void main(String arg[]) {
        System.out.println("Enter a string");
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        StringBuilder sb = new StringBuilder();
        sb.append(str);
        sb = sb.reverse();
        for (int i = 0; i < sb.length(); i++) {
            System.out.print(sb.charAt(i));
        }
    }
}

13. Write the difference between checked and unchecked exception with example code

Checked Exception:
	Checked exceptions are checked at compile-time. It means if a method is throwing a checked exception then it should handle the exception using try-catch block otherwise it will give a compilation error.
Example:

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
class Example {
    public static void main(String args[]) {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream("B:/myfile.txt");
        } catch (FileNotFoundException fnfe) {
            System.out.println("The specified file is not "
                    + "present at the given path");
        }
        int k;
        try {
            while ((k = fis.read()) != -1) {
                System.out.print((char) k);
            }
            fis.close();
        } catch (IOException ioe) {
            System.out.println("I/O error occurred: " + ioe);
        }
    }
}

Unchecked exception:
	Unchecked exceptions are not checked at compile time. It means if your program is throwing an unchecked exception and even if you didn’t handle/declare that exception, the program won’t give a compilation error. Most of the times these exception occurs due to the bad data provided by user during the user-program interaction. 
Example:

class Example {
    public static void main(String args[]) {
        try {
            int arr[] = {1, 2, 3, 4, 5};
            System.out.println(arr[7]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("The specified index does not exist "
                    + "in array. Please correct the error.");
        }
    }
}

14. Write the difference between throw and throws with example code

throw
	Java throw keyword is used to explicitly throw an exception. It is followed by an instance and used within the method.
Example:

public class Example {
    void checkAge(int age) {
        if (age < 18) {
            throw new ArithmeticException("Not Eligible for voting");
        } else {
            System.out.println("Eligible for voting");
        }
    }
    public static void main(String args[]) {
        Example obj = new Example();
        obj.checkAge(13);
        System.out.println("End Of Program");
    }
}

throws
	Java throws keyword is used to declare an exception. It is followed by class and used with the method signature.
Example:

public class Example {
    int division(int a, int b) throws ArithmeticException {
        int t = a / b;
        return t;
    }
    public static void main(String args[]) {
        Example obj = new Example();
        try {
            System.out.println(obj.division(15, 0));
        } catch (ArithmeticException e) {
            System.out.println("You shouldn't divide number by zero");
        }
    }
}

15.   Write a note or nested try…catch block with example code

	When a try catch block is present in another try block then it is called the nested try catch block. Each time a try block does not have a catch handler for a particular exception, then the catch blocks of parent try block are inspected for that exception, if match is found that that catch block executes.
Example:

class Example {
    public static void main(String args[]) {
        try {
            try {
                System.out.println("going to divide");
                int b = 39 / 0;
            } catch (ArithmeticException e) {
                System.out.println(e);
            }
            try {
                int a[] = new int[5];
                a[5] = 4;
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println(e);
            }
            System.out.println("other statement");
        } catch (Exception e) {
            System.out.println("handeled");
        }
        System.out.println("normal flow..");
    }
}

16.   Write a note on MultiThreading and MultiTasking

MultiThreading
	An application typically is implemented as a separate process with several threads of control. In some situations a single application may be required to perform several similar tasks for example a web server accepts client requests for web pages, images, sound, and so forth.
MultiTasking
	 Multitasking is the logical extension of multiprogramming .The concept of multitasking is quite similar tomultiprogramming but difference is that the switching between jobs occurs so frequently that the users can interact with each program while it is running. 
	 
17.   Write a short note on Deque and give example code.

	The Deque is related to the double-ended queue that supports addition or removal of elements from either end of the data structure, it can be used as a queue (first-in-first-out/FIFO) or as a stack (last-in-first-out/LIFO).
Example:

import java.util.*;
public class Example {
    public static void main(String[] args) {
        //Creating Deque and adding elements  
        Deque<String> deque = new ArrayDeque<String>();
        deque.add("Ravi");
        deque.add("Vijay");
        deque.add("Ajay");
        //Traversing elements  
        for (String str : deque) {
            System.out.println(str);
        }
    }
}

18.   Write a short note on Generics an all types of Parameters used in Generics with example code.
	Generics was added in Java 5 to provide compile-time type checking and removing risk of ClassCastException that was common while working with collection classes. The whole collection framework was re-written to use generics for type-safety.
Example:

public class MaximumTest {
   // determines the largest of three Comparable objects
    public static <T extends Comparable<T>> T maximum(T x, T y, T z) {
        T max = x;   // assume x is initially the largest
        if (y.compareTo(max) > 0) {
            max = y;   // y is the largest so far
        }
        if (z.compareTo(max) > 0) {
            max = z;   // z is the largest now                 
        }
        return max;   // returns the largest object   
    }
    public static void main(String args[]) {
        System.out.printf("Max of %d, %d and %d is %d\n\n",
                3, 4, 5, maximum(3, 4, 5));
        System.out.printf("Max of %.1f,%.1f and %.1f is %.1f\n\n",
                6.6, 8.8, 7.7, maximum(6.6, 8.8, 7.7));
        System.out.printf("Max of %s, %s and %s is %s\n", "pear",
                "apple", "orange", maximum("pear", "apple", "orange"));
    }
}

19.   Write a short note on Map Interface.
	A map contains values on the basis of key i.e. key and value pair. Each key and value pair is known as an entry. Map contains only unique keys. Map is useful if you have to search, update or delete elements on the basis of key.
	
20.   Write the difference between LinkedList and ArrayList.

LinkedList:
	ArrayList internally uses dynamic array to store the elements. ArrayList class can act as a list only because it implements List only.  ArrayList is better for storing and accessing data.
	
ArrayList:
	LinkedList internally uses doubly linked list to store the elements. LinkedList class can act as a list and queue both because it implements List and Deque interfaces. LinkedList is better for manipulating data.
	
21.   Write a note on Dynamic array in java.
	In Java, the size of an array is fixed when it is created. Elements are not allowed to be inserted or removed. However, it is possible to implement a dynamic array by allocating a new array and copying the contents from the old array to the new one. A dynamic array has variable size and allows elements to be added or removed.
	
22.   What is the purpose of the System class?
	System class is provided with useful fields (static members) pertaining to the environment.
	Standard input,output and error output streams are provided with System class. These are used to access the externally defined properties and environment variables.
	The System class can not be instantiated.
	
23.   Which is the abstract parent class of FileWriter ?
	Writer is the abstract parent class of FileWriter
	
24.   Which class is used to read streams of characters from a file?
	InputStreamReader class is used to read streams of characters from a file.
	
25.   Which class is used to read streams of raw bytes from a file?
	FileInputStream class is used to read streams of raw bytes from a file
	
26.   What are the differences between FileInputStream/FileOutputStream and RandomAccessFile

RandomAccessFile:
	RandomAccessFile treats the file as an array of bytes where it has the internal pointer. The fact that it treats it like a large array of bytes is what is unique about this class.
	
FileInputStream/FileOutputStream:
	FileInputStream however just reads the stream and returns the data. It is more suited to reading raw data like images etc. It does not treat the file as a large array, it just keeps tabs of where in the file it has read so far. 
	
27.   Write a note on Channels and Buffer with example.

Buffer:
	A buffer is essentially a block of memory into which you can write data, which you can then later read again. This memory block is wrapped in a NIO Buffer object, which provides a set of methods that makes it easier to work with the memory block.
Example:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
public class Index {
    public static void main(String[] args) {
        Path file = null;
        BufferedReader bufferedReader = null;
        try {
            file = Paths.get("D:\\testout.txt");
            InputStream inputStream = Files.newInputStream(file);
            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            System.out.println("Reading the Line of testout.txt file: " + bufferedReader.readLine());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                bufferedReader.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
}

Channel:
	Java NIO Channels are similar to streams with a few differences: Channels can be read and written asynchronously. Channels always read to, or write from, a Buffer.
Example:
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
public class Index {
    public static void main(String[] args) {
        try {
            RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
            FileChannel inChannel = aFile.getChannel();
            ByteBuffer buf = ByteBuffer.allocate(i).allocate(48);
            int bytesRead = inChannel.read(buf);
            while (bytesRead != -1) {
                System.out.println("Read " + bytesRead);
                buf.flip();
                while (buf.hasRemaining()) {
                    System.out.print((char) buf.get());
                }
                buf.clear();
                bytesRead = inChannel.read(buf);
            }
            aFile.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

28.   What is the difference between System.out ,System.err and System.in?

System.out
	System.out is a PrintStream. System.out normally outputs the data you write to it to the console. This is often used from console-only programs like command line tools.
	
System.err
	System.err is a PrintStream. System.err works like System.out except it is normally only used to output error texts. Some programs (like Eclipse) will show the output to System.err in red text, to make it more obvious that it is error text.
	
System.in	
	System.in is an InputStream which is typically connected to keyboard input of console programs. System.in is not used as often since data is commonly passed to a command line Java application via command line arguments, or configuration files.
	
35.   Write a note on PreparedStatement and ResultSetMetaData interfaces with code snippets.

PreparedStatement:
	The PreparedStatement interface is a subinterface of Statement. It is used to execute parameterized query.
Code snippets:

Class.forName("oracle.jdbc.driver.OracleDriver");  
Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","oracle");  
PreparedStatement stmt=con.prepareStatement("insert into Emp values(?,?)");

ResultSetMetaData:
	The metadata means data about data i.e. we can get further information from the data. If you have to get metadata of a table like total number of column, column name, column type etc. , ResultSetMetaData interface is useful because it provides methods to get metadata from the ResultSet object.
code snippets:

PreparedStatement ps=con.prepareStatement("select * from emp");  
ResultSet rs=ps.executeQuery();  
ResultSetMetaData rsmd=rs.getMetaData();
System.out.println("Total columns: "+rsmd.getColumnCount());  

36.   Write a note on DDL, DML, DQL, DDL with code snippets.

Data Definition Language (DDL)
	The commands of SQL that are used to create database objects, alter the structure of the database objects and delete database objects from database are collectively called as DDL. Examples include Create, Alter , Drop, Truncate, Rename and Comment Commands.
code snippets:
	create table Employee(Id int, Name nvarchar(50));

Data Manipulation Language (DML)
	The commands of SQL that are used to insert data into the database, modify the data of the database and to delete data from the database are collectively called as DML. Examples include Insert, Update and Delete.	
code snippets:
	insert into Employee values(101,"John");
	
Data Query Language (DQL)
	The commands of SQL that are used to retrieve data from the database are collectively called as DQL. So all Select statements comes under DQL.
code snippets:
	select * from Employee;

37.   Write a note on HTML , CSS and Javascript.

HTML	
	HTML is the standard markup language for creating Web pages which stands for Hyper Text Markup Language. It  describes the structure of Web pages using markup. HTML elements are the building blocks of HTML pages which elements are represented by tags

CSS
	CSS stands for Cascading Style Sheets. It  describes how HTML elements are to be displayed on screen, paper, or in other media. It can control the layout of multiple web pages all at once

Javascript
	JavaScript is the programming language of HTML and the Web. In HTML, JavaScript code must be inserted between <script> and </script> tags.
	
38.   Write a code to fetch the data from H2 and put it in any collection object and display it.

import java.sql.*;
import java.util.ArrayList;
import java.util.Iterator;

public class Test {

    public static void main(String[] ar) {
        String url = "jdbc:h2:tcp://localhost/~/TEST";
        String user = "sa";
        String pass = "";
        String query = "select * from student";
        ArrayList<String> arrList = new ArrayList<>();
        try {
            Connection con = DriverManager.getConnection(url, user, pass);
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                String s1 = String.valueOf(rs.getInt(1));
                String s2 = rs.getString(2);
                arrList.add(s1);
                arrList.add(s2);
            }
            Iterator itr = arrList.iterator();
            while (itr.hasNext()) {
                System.out.println(itr.next());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

39.   Describe the different approaches of String processing.

  String is a sequence of characters, for e.g. “Hello” is a string of 5 characters. In java, string is an immutable object which means it is constant and can cannot be changed once it has been created. 
  String uses various approaches using StringBuffer and StringBuilder classes.
  The java.lang.String class provides a lot of methods to work on string. By the help of these methods, we can perform operations on string such as trimming, concatenating, converting, comparing, replacing strings etc.


