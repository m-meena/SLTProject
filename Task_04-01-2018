1)  Can abstract class have constructors in Java?
		Yes. Abstract class can have constructors in Java.
		
2)  Can abstract class implements interface in Java? do they require to implement all methods?
		Yes. Abstract class can implement interface in Java. Yes. It requires to implement all methods.
		
3)  Can abstract class be final in Java?
		No, abstract class can not be final in Java.
		
4)  Can abstract class have static methods in Java?
		Yes, abstract class can have static methods in Java.

5)  Can you create instance of abstract class?
		We can not create instance of abstract class.
		
6)  Is it necessary for abstract class to have abstract method?
		No, it is not necessary for abstract class to have abstract method. 
		
7)  Difference between abstract class and interface in Java?
		1. Abstract class can have methods with implementation whereas interface cannot have any method implementation.
		2. An abstract class can have static, final or static final variable with any access specifier(private, public or protected) whereas an interface can have only public static final (constant) variable.
		
8)  When do you favor abstract class over interface?
		We can favor abstract class if we want provide implementation details to the child class without an instance of class.
		
9)  What is abstract method in Java?
		A method that is declared without an implementation is called abstract method. It must be declared in an abstract class.
		
10) Can abstract class contains main method in Java ?
		Yes, abstract class can contain main method because for main method there is no need to create an instance of class.
		
11) what is static block in java?
		A static block is a normal block of code enclosed in braces, { }, and preceded by the static keyword. A class can have any number of static blocks which appear anywhere in the class body. 
	
12) What is the need of static block?	
		Static block is used for initializing static varibles when class is loaded in memory. It run only once before the constructor and main method.
		
13) Can we overload static methods in java?
		Yes, we can overload static methods. We can have two ore more static methods with same name, but differences in input parameters.
		
14) Can we call super class static methods from sub class?
		Yes, we can call super class static methods from sub class without an instance.
		
15) What is the difference between final and static keywords?
		Static keyword can be applied to instance variables and methods but not to classes whereas final keyword can be applied to variables, methods and classes. 
		
16) Write a note on covariant return type with example code.
		The covariant return type specifies that the return type may vary in the same direction as the subclass. In other words, when one overrides a method, the return type of the overriding method is allowed to be a subtype of the overridden method's return type.
Example:
class Test {
    Test get() {
        return this;  // returns Test
    }
}
public class Test1 extends Test {
    Test1 get() {
        return this;   // returns Test1, method overrides
    }
    void message() {
        System.out.println("covariant return type");
    }
    public static void main(String args[]) {
        new Test1().get().message();
    }
}

17) Write a note on Enum with example code.
		Enum in java is a data type that contains fixed set of constants. It is a reference type (just like a class, interface and array), which holds a reference to memory in the heap. It is implicitly final, because the constants should not be changed.
Example:
public class Sample {
    enum Days {
        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
    };
    public static void main(String ar[]) {
        for (Days d : Days.values()) {
            System.out.println(d);
        }

    }
}

18) Write a note on use of super keyword and super() method.
		The super keyword in java is a reference variable that is used to refer parent class objects. It is used to access the data members of parent class when both parent and child class have member with same name.
		super() method calls the parent constructor with no arguments. It can call both parametric as well as non parametric constructors depending upon the situation.
		
19) Write a code to implement abstraction using interface.	

interface MyInterface {
    public void method1();   
}
public class Sample implements MyInterface {
    public void method1() {
        System.out.println("method1");
    }
    public static void main(String arg[]) {
        MyInterface obj = new Sample();
        obj.method1();
    }
}

20) Write a Java program to sort a numeric array and a string array.

import java.util.Arrays;
public class Sample {
    public static void main(String arg[]) {
        int arr1[] = {17, 20, 18, 14, 13, 11, 15};
        String arr2[] = {"mango", "apple", "orange"};  
        System.out.println("\tNumeric array");
        System.out.println("Before sorting: " + Arrays.toString(arr1));
        Arrays.sort(arr1);
        System.out.println("After sorting: " + Arrays.toString(arr1));
        System.out.println("\tString array");
        System.out.println("Before sorting: " + Arrays.toString(arr2));
        Arrays.sort(arr2);
        System.out.println("After sorting: " + Arrays.toString(arr2));
    }
}

21) Write a Java program to sum values of an array.	
		
public class Sample {
    public static void main(String arg[]) {
        int array[] = {10, 20, 30, 40, 50};
        int sum = 0;
        for (int num : array) {
            sum = sum + num;
        }
        System.out.println("Sum of array elements is:" + sum);
    }
}
		
22) Write a Java program to remove a specific element from an array.
	
import java.util.Arrays;
public class Sample {
    public static void main(String arg[]) {
        int array[] = {10, 20, 30, 40, 50};
        int remove = 3;
        System.out.println("Before removing:" + Arrays.toString(array));
        for (int i = remove; i < array.length - 1; i++) {
            array[i] = array[i + 1];
        }
        System.out.println("After removing:" + Arrays.toString(array));
    }
}	

23) Write a Java program to reverse an array of integer values.
	
import java.util.Arrays;
public class Sample {
    public static void main(String arg[]) {
        int array[] = {10, 20, 30, 40, 50};
        int temp;
        System.out.println("Before reversing:" + Arrays.toString(array));
        for (int i = 0; i < array.length / 2; i++) {
            temp = array[i];
            array[i] = array[array.length - i - 1];
            array[array.length - i - 1] = temp;
        }
        System.out.println("Reverse array: " + Arrays.toString(array));
    }
}	
	
24) Write a Java program to find the duplicate values of an array of integer values.	
		
public class Sample {
    public static void main(String arg[]) {
        int array[] = {1 ,2 ,2, 4, 5, 7, 7, 8, 9 ,5};
        for (int i = 0; i < array.length-1; i++)
        {
            for (int j = i+1; j < array.length; j++)
            {
                if ((array[i] == array[j]) && (i != j))
                {
                    System.out.println("Duplicate Element : "+array[j]);
                }
            }
        }
    }  
}
